function createSelect(e) { const t = document.createElement("select"); if (t.id = e.Field, e.Placeholder) { const a = document.createElement("option"); a.textContent = e.Placeholder, a.setAttribute("selected", ""), a.setAttribute("disabled", ""), t.append(a) } return e.Options.split(",").forEach((e => { const a = document.createElement("option"); a.textContent = e.trim(), a.value = e.trim(), t.append(a) })), "x" === e.Mandatory && t.setAttribute("required", "required"), t } function constructPayload(e) { const t = {}; return [...e.elements].forEach((e => { "checkbox" === e.type ? e.checked && (t[e.id] = e.value) : e.id && (t[e.id] = e.value) })), t } async function submitForm(e) { const t = constructPayload(e); t.timestamp = (new Date).toJSON(); const a = await fetch(e.dataset.action, { method: "POST", cache: "no-cache", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ data: t }) }); return await a.text(), t } function createButton(e) { const t = document.createElement("button"); return t.textContent = e.Label, t.classList.add("button"), "submit" === e.Type && t.addEventListener("click", (async a => { const n = t.closest("form"); if (e.Placeholder && (n.dataset.action = e.Placeholder), n.checkValidity()) { a.preventDefault(), t.setAttribute("disabled", ""), await submitForm(n); const r = e.Extra; window.location.href = r } })), t } function createHeading(e, t) { const a = document.createElement(t); return a.textContent = e.Label, a } function createInput(e) { const t = document.createElement("input"); return t.type = e.Type, t.id = e.Field, t.setAttribute("placeholder", e.Placeholder), "x" === e.Mandatory && t.setAttribute("required", "required"), t } function createTextArea(e) { const t = document.createElement("textarea"); return t.id = e.Field, t.setAttribute("placeholder", e.Placeholder), "x" === e.Mandatory && t.setAttribute("required", "required"), t } function createLabel(e) { const t = document.createElement("label"); return t.setAttribute("for", e.Field), t.textContent = e.Label, "x" === e.Mandatory && t.classList.add("required"), t } function applyRules(e, t) { const a = constructPayload(e); t.forEach((t => { const { type: n, condition: { key: r, operator: c, value: o } } = t.rule; "visible" === n && "eq" === c && (a[r] === o ? e.querySelector(`.${t.fieldId}`).classList.remove("hidden") : e.querySelector(`.${t.fieldId}`).classList.add("hidden")) })) } function fill(e) { const { action: t } = e.dataset; if ("/tools/bot/register-form" === t) { const t = new URL(window.location.href); e.querySelector("#owner").value = t.searchParams.get("owner") || "", e.querySelector("#installationId").value = t.searchParams.get("id") || "" } } async function createForm(e) { const { pathname: t } = new URL(e), a = await fetch(t), n = await a.json(), r = document.createElement("form"), c = []; return r.dataset.action = t.split(".json")[0], n.data.forEach((e => { e.Type = e.Type || "text"; const t = document.createElement("div"), a = e.Style ? ` form-${e.Style}` : "", n = `form-${e.Type}-wrapper${a}`; switch (t.className = n, t.classList.add("field-wrapper"), e.Type) { case "select": t.append(createLabel(e)), t.append(createSelect(e)); break; case "heading": t.append(createHeading(e, "h3")); break; case "legal": t.append(createHeading(e, "p")); break; case "checkbox": t.append(createInput(e)), t.append(createLabel(e)); break; case "text-area": t.append(createLabel(e)), t.append(createTextArea(e)); break; case "submit": t.append(createButton(e)); break; default: t.append(createLabel(e)), t.append(createInput(e)) }if (e.Rules) try { c.push({ fieldId: n, rule: JSON.parse(e.Rules) }) } catch (e) { } r.append(t) })), r.addEventListener("change", (() => applyRules(r, c))), applyRules(r, c), fill(r), r } export default async function decorate(e) { const t = e.querySelector('a[href$=".json"]'); t && t.replaceWith(await createForm(t.href)) }