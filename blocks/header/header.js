import { getMetadata, decorateIcons } from "../../scripts/lib-franklin.js"; const isDesktop = window.matchMedia("(min-width: 900px)"); function closeOnEscape(e) { if ("Escape" === e.code) { const e = document.getElementById("nav"), t = e.querySelector(".nav-sections"), n = t.querySelector('[aria-expanded="true"]'); n && isDesktop.matches ? (toggleAllNavSections(t), n.focus()) : isDesktop.matches || (toggleMenu(e, t), e.querySelector("button").focus()) } } function openOnKeydown(e) { const t = document.activeElement; if ("nav-drop" === t.className && ("Enter" === e.code || "Space" === e.code)) { const e = "true" === t.getAttribute("aria-expanded"); toggleAllNavSections(t.closest(".nav-sections")), t.setAttribute("aria-expanded", e ? "false" : "true") } } function focusNavSection() { document.activeElement.addEventListener("keydown", openOnKeydown) } function toggleAllNavSections(e, t = !1) { e.querySelectorAll(".nav-sections > ul > li").forEach((e => { e.setAttribute("aria-expanded", t) })) } function toggleMenu(e, t, n = null) { const a = null !== n ? !n : "true" === e.getAttribute("aria-expanded"), o = e.querySelector(".nav-hamburger button"); document.body.style.overflowY = a || isDesktop.matches ? "" : "hidden", e.setAttribute("aria-expanded", a ? "false" : "true"), toggleAllNavSections(t, a || isDesktop.matches ? "false" : "true"), o.setAttribute("aria-label", a ? "Open navigation" : "Close navigation"); const s = t.querySelectorAll(".nav-drop"); isDesktop.matches ? s.forEach((e => { e.hasAttribute("tabindex") || (e.setAttribute("role", "button"), e.setAttribute("tabindex", 0), e.addEventListener("focus", focusNavSection)) })) : s.forEach((e => { e.removeAttribute("role"), e.removeAttribute("tabindex"), e.removeEventListener("focus", focusNavSection) })), !a || isDesktop.matches ? window.addEventListener("keydown", closeOnEscape) : window.removeEventListener("keydown", closeOnEscape) } export default async function decorate(e) { const t = getMetadata("nav"), n = t ? new URL(t).pathname : "/nav", a = await fetch(`${n}.plain.html`); if (a.ok) { const t = await a.text(), n = document.createElement("nav"); n.id = "nav", n.innerHTML = t;["brand", "sections", "tools"].forEach(((e, t) => { const a = n.children[t]; a && a.classList.add(`nav-${e}`) })); const o = n.querySelector(".nav-sections"); o && o.querySelectorAll(":scope > ul > li").forEach((e => { e.querySelector("ul") && e.classList.add("nav-drop"), e.addEventListener("click", (() => { if (isDesktop.matches) { const t = "true" === e.getAttribute("aria-expanded"); toggleAllNavSections(o), e.setAttribute("aria-expanded", t ? "false" : "true") } })) })); const s = document.createElement("div"); s.classList.add("nav-hamburger"), s.innerHTML = '<button type="button" aria-controls="nav" aria-label="Open navigation">\n        <span class="nav-hamburger-icon"></span>\n      </button>', s.addEventListener("click", (() => toggleMenu(n, o))), n.prepend(s), n.setAttribute("aria-expanded", "false"), toggleMenu(n, o, isDesktop.matches), isDesktop.addEventListener("change", (() => toggleMenu(n, o, isDesktop.matches))), decorateIcons(n); const c = document.createElement("div"); c.className = "nav-wrapper", c.append(n), e.append(c) } }